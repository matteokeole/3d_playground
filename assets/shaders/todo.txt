Instead of reading shader data you can add 1 line of code with some definition.
So for example for pixel shader you add "#define _TYPE_PIXEL_SHADER\n", and for vertex shader you add "#define _TYPE_VERTEX_SHADER\n".
And since glShaderSource accept array of strings, you can do it without modificating or copying orginal source.
Then shader programmer will do #ifdef _TYPE_PIXEL_SHADER ... #endif.

The biggest adventage from this method is reading shader errors.
In your method once shader programmer get shader compile error with line number, that line is far off from actual line with error.
In my method it's off by 1 line, witch is fine.
That make shader programming much much easier.

Other advantage is possibility to create common functions, definitions, variables, etc.
Your method can be easily changed to support common code at the top.
But in my method it can be in any order, and sometimes we want it in different order. Or shader programmer can even use #ifdef inside function if he/she want to.

Another thing is that in my method content of file is 100% correct GLSL code. So we can use generic GLSL minifier, or other tool for GLSL.

The only advantage of your method over mine is that in your method you automaticly have information about witch shaders are in file, and witch arent.
While I have to either enforce usage of certain shader types, or assume that shaders with certain compilation error doesn't exists, or detect type by search in shader source
for string _TYPE_PIXEL_SHADER, _TYPE_VERTEX_SHADER, etc.